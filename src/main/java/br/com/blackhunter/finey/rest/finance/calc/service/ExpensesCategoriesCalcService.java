package br.com.blackhunter.finey.rest.finance.calc.service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicReference;

import br.com.blackhunter.finey.rest.finance.transaction.dto.TransactionData;
import br.com.blackhunter.finey.rest.finance.transaction.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import br.com.blackhunter.finey.rest.auth.util.CryptUtil;
import br.com.blackhunter.finey.rest.core.dto.TransactionPeriodDate;
import br.com.blackhunter.finey.rest.finance.analysis.dto.expanses_categories.ExpenseCategory;
import br.com.blackhunter.finey.rest.finance.analysis.dto.expanses_categories.ExpensesCategories;
import br.com.blackhunter.finey.rest.finance.transaction.entity.TransactionEntity;
import br.com.blackhunter.finey.rest.finance.transaction.enums.TransactionType;
import br.com.blackhunter.finey.rest.integrations.financial_integrator.FinancialIntegrator;
import br.com.blackhunter.finey.rest.integrations.financial_integrator.FinancialIntegratorManager;

/**
 * Servi√ßo respons√°vel por calcular e categorizar despesas financeiras.
 * 
 * <p>Este servi√ßo analisa transa√ß√µes de d√©bito e as agrupa em categorias baseadas
 * na descri√ß√£o das transa√ß√µes, calculando valores totais, percentuais e varia√ß√µes
 * para cada categoria identificada.</p>
 * 
 * <p><strong>Aten√ß√£o:</strong> Todos os valores retornados s√£o criptografados para seguran√ßa.</p>
 * 
 * @author Sistema Finey
 * @version 1.0
 * @since 2024
 */
@Service
public class ExpensesCategoriesCalcService {

    @Value("${hunter.secrets.pluggy.crypt-secret}")
    private String PLUGGY_CRYPT_SECRET;

    @Autowired
    private TransactionService transactionService;
    /**
     * Calcula e categoriza as despesas do usu√°rio para o per√≠odo especificado.
     * 
     * <p><strong>Metodologia de Categoriza√ß√£o:</strong></p>
     * <ol>
     *   <li><strong>Coleta de Dados:</strong> Busca todas as transa√ß√µes DEBIT do per√≠odo</li>
     *   <li><strong>Categoriza√ß√£o Autom√°tica:</strong> Analisa descri√ß√µes para identificar categorias</li>
     *   <li><strong>Agrega√ß√£o:</strong> Soma valores por categoria identificada</li>
     *   <li><strong>C√°lculo de Percentuais:</strong> Calcula participa√ß√£o de cada categoria no total</li>
     *   <li><strong>An√°lise Temporal:</strong> Compara com per√≠odo anterior para varia√ß√£o</li>
     * </ol>
     * 
     * <p><strong>Categorias Identificadas Automaticamente:</strong></p>
     * <ul>
     *   <li><strong>Alimenta√ß√£o:</strong> Supermercado, restaurante, delivery, padaria</li>
     *   <li><strong>Transporte:</strong> Combust√≠vel, Uber, transporte p√∫blico, estacionamento</li>
     *   <li><strong>Moradia:</strong> Aluguel, condom√≠nio, energia, √°gua, internet</li>
     *   <li><strong>Sa√∫de:</strong> Farm√°cia, m√©dico, plano de sa√∫de, exames</li>
     *   <li><strong>Educa√ß√£o:</strong> Escola, curso, livros, material escolar</li>
     *   <li><strong>Lazer:</strong> Cinema, streaming, jogos, viagens</li>
     *   <li><strong>Vestu√°rio:</strong> Roupas, cal√ßados, acess√≥rios</li>
     *   <li><strong>Outros:</strong> Transa√ß√µes n√£o categorizadas automaticamente</li>
     * </ul>
     * 
     * <p><strong>Algoritmo de Categoriza√ß√£o:</strong></p>
     * <pre>
     * Para cada transa√ß√£o DEBIT:
     *   1. Extrair descri√ß√£o da transa√ß√£o
     *   2. Normalizar texto (lowercase, remover acentos)
     *   3. Buscar palavras-chave por categoria
     *   4. Atribuir √† primeira categoria encontrada
     *   5. Se nenhuma categoria encontrada, atribuir a "Outros"
     * </pre>
     * 
     * <p><strong>Exemplo de cen√°rio para valida√ß√£o manual:</strong></p>
     * <pre>
     * Per√≠odo: 01/01/2024 a 31/01/2024
     * 
     * Transa√ß√µes encontradas:
     *   - "SUPERMERCADO EXTRA" -R$ 450,00 ‚Üí Alimenta√ß√£o
     *   - "POSTO SHELL COMBUSTIVEL" -R$ 280,00 ‚Üí Transporte
     *   - "UBER TRIP" -R$ 45,00 ‚Üí Transporte
     *   - "FARMACIA DROGASIL" -R$ 120,00 ‚Üí Sa√∫de
     *   - "NETFLIX ASSINATURA" -R$ 32,90 ‚Üí Lazer
     *   - "TRANSFERENCIA PIX" -R$ 200,00 ‚Üí Outros
     * 
     * C√°lculos:
     *   Total Geral: R$ 1.127,90
     *   
     *   Alimenta√ß√£o: R$ 450,00 (39,9%)
     *   Transporte: R$ 325,00 (28,8%)
     *   Sa√∫de: R$ 120,00 (10,6%)
     *   Lazer: R$ 32,90 (2,9%)
     *   Outros: R$ 200,00 (17,7%)
     * 
     * Varia√ß√µes (compara√ß√£o com per√≠odo anterior - valores simulados):
     *   Alimenta√ß√£o: +5,2% (aumento)
     *   Transporte: -12,3% (redu√ß√£o)
     *   Sa√∫de: +0,8% (est√°vel)
     *   Lazer: -25,0% (redu√ß√£o significativa)
     *   Outros: +15,6% (aumento)
     * </pre>
     * 
     * <p><strong>Exemplo de retorno (dados criptografados):</strong></p>
     * <pre>
     * ExpensesCategories {
     *   categories: [
     *     {
     *       name: "encrypted_Alimenta√ß√£o",
     *       icon: "encrypted_üçΩÔ∏è",
     *       amount: "encrypted_450.00",
     *       percentage: "encrypted_39.9",
     *       previousPercentage: "encrypted_34.7"
     *     },
     *     {
     *       name: "encrypted_Transporte",
     *       icon: "encrypted_üöó",
     *       amount: "encrypted_325.00",
     *       percentage: "encrypted_28.8",
     *       previousPercentage: "encrypted_41.1"
     *     }
     *     // ... outras categorias
     *   ],
     *   totalExpenses: "encrypted_1127.90"
     * }
     * </pre>
     * 
     * <p><strong>Como validar manualmente (QA):</strong></p>
     * <ol>
     *   <li><strong>Valida√ß√£o de Dados:</strong></li>
     *   <ul>
     *     <li>Listar todas as transa√ß√µes DEBIT do per√≠odo</li>
     *     <li>Verificar se todas foram inclu√≠das no c√°lculo</li>
     *     <li>Confirmar que apenas transa√ß√µes DEBIT foram consideradas</li>
     *   </ul>
     *   <li><strong>Valida√ß√£o de Categoriza√ß√£o:</strong></li>
     *   <ul>
     *     <li>Para cada transa√ß√£o, verificar se a categoria atribu√≠da faz sentido</li>
     *     <li>Testar com descri√ß√µes conhecidas (ex: "SUPERMERCADO" ‚Üí Alimenta√ß√£o)</li>
     *     <li>Verificar se transa√ß√µes sem categoria clara v√£o para "Outros"</li>
     *   </ul>
     *   <li><strong>Valida√ß√£o de C√°lculos:</strong></li>
     *   <ul>
     *     <li>Somar manualmente valores por categoria</li>
     *     <li>Verificar se soma das categorias = total de despesas</li>
     *     <li>Calcular percentuais: (Valor Categoria / Total) √ó 100</li>
     *     <li>Verificar se soma dos percentuais = 100%</li>
     *   </ul>
     *   <li><strong>Valida√ß√£o de Criptografia:</strong></li>
     *   <ul>
     *     <li>Descriptografar valores retornados</li>
     *     <li>Comparar com c√°lculos manuais</li>
     *     <li>Verificar se todos os campos sens√≠veis est√£o criptografados</li>
     *   </ul>
     * </ol>
     * 
     * @param bankAccountIds lista de IDs das contas banc√°rias (criptografados)
     * @param periodDate per√≠odo de an√°lise com data de in√≠cio e fim
     * @return categorias de despesas criptografadas com valores, percentuais e varia√ß√µes
     * @throws Exception se houver erro na descriptografia, busca de transa√ß√µes ou criptografia dos resultados
     */
    public ExpensesCategories calculateExpensesCategoriesEncrypted(
            List<String> bankAccountIds,
            TransactionPeriodDate periodDate) throws Exception {
        
        // Mapa para armazenar valores por categoria
        Map<String, CategoryData> categoriesMap = new HashMap<>();
        AtomicReference<BigDecimal> totalExpenses = new AtomicReference<>(BigDecimal.ZERO);
        
        // Processar transa√ß√µes de cada conta
        for (String accountId : bankAccountIds) {
            List<TransactionData> transactions = transactionService.getAllTransactionsPeriodByAccountId(accountId, periodDate);
            
            // Processar apenas transa√ß√µes de d√©bito
            for (TransactionData transaction : transactions) {
                if (transaction.getType() == TransactionType.DEBIT) {
                    BigDecimal amount = transaction.getAmount().abs();
                    totalExpenses.set(totalExpenses.get().add(amount));
                    
                    // Categorizar transa√ß√£o
                    String categoryName = categorizeTransaction(transaction);
                    String categoryIcon = getCategoryIcon(categoryName);
                    
                    // Adicionar ao mapa de categorias
                    categoriesMap.computeIfAbsent(categoryName, k -> new CategoryData(categoryName, categoryIcon))
                        .addAmount(amount);
                }
            }
        }
        
        // Converter para lista de ExpenseCategory com percentuais
        List<ExpenseCategory> categories = new java.util.ArrayList<>(categoriesMap.values().stream()
                .map(categoryData -> {
                    BigDecimal total = totalExpenses.get();
                    double percentage;

                    if (total.compareTo(BigDecimal.ZERO) > 0) {
                        BigDecimal ratio = categoryData.getAmount()
                                .divide(total, 4, RoundingMode.HALF_UP);

                        percentage = ratio.multiply(BigDecimal.valueOf(100)).doubleValue();
                    } else {
                        percentage = 0.0;
                    }

                    // Simular varia√ß√£o do per√≠odo anterior (em implementa√ß√£o real, buscar dados hist√≥ricos)
                    double previousPercentage = calculatePreviousPercentage(categoryData.getName(), percentage, bankAccountIds, periodDate);

                    try {
                        return new ExpenseCategory(
                                CryptUtil.encrypt(categoryData.getName(), PLUGGY_CRYPT_SECRET),
                                CryptUtil.encrypt(categoryData.getIcon(), PLUGGY_CRYPT_SECRET),
                                CryptUtil.encrypt(categoryData.getAmount().toString(), PLUGGY_CRYPT_SECRET),
                                CryptUtil.encrypt(String.valueOf(percentage), PLUGGY_CRYPT_SECRET),
                                CryptUtil.encrypt(String.valueOf(previousPercentage), PLUGGY_CRYPT_SECRET)
                        );
                    } catch (Exception e) {
                        throw new RuntimeException("Erro ao criptografar dados da categoria: " + categoryData.getName(), e);
                    }
                }).toList());
        
        // Ordenar categorias por valor (maior para menor)
        categories.sort((a, b) -> {
            try {
                return Double.compare(
                        Double.parseDouble(CryptUtil.decrypt(b.getAmount(), PLUGGY_CRYPT_SECRET)),
                        Double.parseDouble(CryptUtil.decrypt(a.getAmount(), PLUGGY_CRYPT_SECRET))
                );
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
        
        try {
            return new ExpensesCategories(
                categories,
                CryptUtil.encrypt(totalExpenses.toString(), PLUGGY_CRYPT_SECRET)
            );
        } catch (Exception e) {
            throw new RuntimeException("Erro ao criptografar total de despesas", e);
        }
    }
    
    /**
     * Categoriza uma transa√ß√£o baseada em sua descri√ß√£o.
     * 
     * <p><strong>Algoritmo de Categoriza√ß√£o:</strong></p>
     * <ol>
     *   <li>Normaliza a descri√ß√£o (lowercase, remove acentos)</li>
     *   <li>Busca palavras-chave espec√≠ficas por categoria</li>
     *   <li>Retorna a primeira categoria encontrada</li>
     *   <li>Se nenhuma categoria for identificada, retorna "Outros"</li>
     * </ol>
     * 
     * @param transaction transa√ß√£o a ser categorizada
     * @return nome da categoria identificada
     */
    private String categorizeTransaction(TransactionData transaction) {
        String description = transaction.getDescription().toLowerCase();
        
        // Usar categoria j√° definida se dispon√≠vel
        if (transaction.getCategory() != null && !transaction.getCategory().trim().isEmpty()) {
            return transaction.getCategory();
        }
        
        // Categoriza√ß√£o baseada em palavras-chave na descri√ß√£o
        if (containsKeywords(description, "supermercado", "mercado", "padaria", "restaurante", 
                            "lanchonete", "delivery", "ifood", "uber eats", "food", "alimentacao")) {
            return "Alimenta√ß√£o";
        }
        
        if (containsKeywords(description, "posto", "combustivel", "gasolina", "etanol", "uber", 
                            "99", "taxi", "metro", "onibus", "transporte", "estacionamento")) {
            return "Transporte";
        }
        
        if (containsKeywords(description, "aluguel", "condominio", "energia", "luz", "agua", 
                            "internet", "telefone", "gas", "iptu", "moradia")) {
            return "Moradia";
        }
        
        if (containsKeywords(description, "farmacia", "drogaria", "medico", "hospital", 
                            "clinica", "laboratorio", "plano saude", "unimed", "saude")) {
            return "Sa√∫de";
        }
        
        if (containsKeywords(description, "escola", "faculdade", "curso", "livro", "material escolar", 
                            "educacao", "universidade", "colegio")) {
            return "Educa√ß√£o";
        }
        
        if (containsKeywords(description, "cinema", "netflix", "spotify", "streaming", "jogo", 
                            "viagem", "hotel", "lazer", "entretenimento")) {
            return "Lazer";
        }
        
        if (containsKeywords(description, "roupa", "calcado", "sapato", "tenis", "vestuario", 
                            "moda", "loja", "shopping")) {
            return "Vestu√°rio";
        }
        
        return "Outros";
    }
    
    /**
     * Verifica se a descri√ß√£o cont√©m alguma das palavras-chave especificadas.
     * 
     * @param description descri√ß√£o da transa√ß√£o (j√° em lowercase)
     * @param keywords palavras-chave a serem buscadas
     * @return true se alguma palavra-chave for encontrada
     */
    private boolean containsKeywords(String description, String... keywords) {
        for (String keyword : keywords) {
            if (description.contains(keyword.toLowerCase())) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * Retorna o √≠cone correspondente √† categoria.
     * 
     * @param categoryName nome da categoria
     * @return √≠cone emoji da categoria
     */
    private String getCategoryIcon(String categoryName) {
        switch (categoryName) {
            case "Alimenta√ß√£o": return "üçΩÔ∏è";
            case "Transporte": return "üöó";
            case "Moradia": return "üè†";
            case "Sa√∫de": return "‚öïÔ∏è";
            case "Educa√ß√£o": return "üìö";
            case "Lazer": return "üé¨";
            case "Vestu√°rio": return "üëï";
            default: return "üìä";
        }
    }
    
    /**
     * Calcula o percentual real da categoria no per√≠odo anterior baseado em dados da Pluggy.
     * 
     * <p><strong>Implementa√ß√£o:</strong> Busca transa√ß√µes do per√≠odo anterior e calcula
     * o percentual real da categoria espec√≠fica em rela√ß√£o ao total de despesas daquele per√≠odo.</p>
     * 
     * <p><strong>Passos da implementa√ß√£o:</strong></p>
     * <ol>
     *   <li>Determina o per√≠odo anterior com mesma dura√ß√£o</li>
     *   <li>Busca todas as transa√ß√µes de d√©bito do per√≠odo anterior</li>
     *   <li>Categoriza as transa√ß√µes usando a mesma l√≥gica atual</li>
     *   <li>Calcula o percentual da categoria espec√≠fica</li>
     *   <li>Retorna o percentual real ou valor padr√£o em caso de erro</li>
     * </ol>
     * 
     * @param categoryName nome da categoria
     * @param currentPercentage percentual atual da categoria (usado como fallback)
     * @param bankAccountIds lista de IDs das contas banc√°rias
     * @param periodDate per√≠odo atual para calcular o per√≠odo anterior
     * @return percentual real da categoria no per√≠odo anterior
     */
    private double calculatePreviousPercentage(String categoryName, double currentPercentage,
                                             List<String> bankAccountIds,
                                             TransactionPeriodDate periodDate) {
        try {
            // Calcular per√≠odo anterior com mesma dura√ß√£o
            LocalDate currentStart = periodDate.getStartDate();
            LocalDate currentEnd = periodDate.getEndDate();
            long periodDays = ChronoUnit.DAYS.between(currentStart, currentEnd);
            
            LocalDate previousEnd = currentStart.minusDays(1);
            LocalDate previousStart = previousEnd.minusDays(periodDays);
            
            // Mapa para armazenar valores por categoria do per√≠odo anterior
            Map<String, BigDecimal> previousCategoriesMap = new HashMap<>();
            BigDecimal totalPreviousExpenses = BigDecimal.ZERO;
            
            // Buscar transa√ß√µes do per√≠odo anterior para cada conta
            for (String accountId : bankAccountIds) {
                try {
                    List<TransactionData> transactions = transactionService.getAllTransactionsPeriodByAccountId(accountId, null, null, previousStart, previousEnd);

                    for (TransactionData transaction : transactions) {
                         if (transaction.getType() == TransactionType.DEBIT) {
                             String category = categorizeTransaction(transaction);
                             BigDecimal amount = transaction.getAmount().abs();
                             
                             previousCategoriesMap.merge(category, amount, BigDecimal::add);
                             totalPreviousExpenses = totalPreviousExpenses.add(amount);
                         }
                     }
                } catch (Exception e) {
                    System.err.println("Erro ao buscar transa√ß√µes do per√≠odo anterior para conta " + accountId + ": " + e.getMessage());
                }
            }
            
            // Calcular percentual da categoria espec√≠fica no per√≠odo anterior
            if (totalPreviousExpenses.compareTo(BigDecimal.ZERO) > 0) {
                BigDecimal categoryAmount = previousCategoriesMap.getOrDefault(categoryName, BigDecimal.ZERO);
                
                if (categoryAmount.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal ratio = categoryAmount.divide(totalPreviousExpenses, 4, RoundingMode.HALF_UP);
                    return ratio.multiply(BigDecimal.valueOf(100)).doubleValue();
                }
            }
            
            // Se n√£o h√° dados do per√≠odo anterior, retornar 0
            return 0.0;
            
        } catch (Exception e) {
            System.err.println("Erro ao calcular percentual anterior para categoria " + categoryName + ": " + e.getMessage());
            // Em caso de erro, usar valor padr√£o baseado no percentual atual
            return currentPercentage * 0.90; // Assume redu√ß√£o de 10% como padr√£o
        }
    }
    
    /**
     * Classe auxiliar para armazenar dados de uma categoria durante o processamento.
     */
    private static class CategoryData {
        private final String name;
        private final String icon;
        private BigDecimal amount;
        
        public CategoryData(String name, String icon) {
            this.name = name;
            this.icon = icon;
            this.amount = BigDecimal.ZERO;
        }
        
        public void addAmount(BigDecimal amount) {
            this.amount = this.amount.add(amount);
        }
        
        public String getName() { return name; }
        public String getIcon() { return icon; }
        public BigDecimal getAmount() { return amount; }
    }
}