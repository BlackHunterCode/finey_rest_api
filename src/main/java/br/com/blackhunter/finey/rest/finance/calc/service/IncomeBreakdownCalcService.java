package br.com.blackhunter.finey.rest.finance.calc.service;

import java.math.BigDecimal;
import java.math.RoundingMode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;


import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import br.com.blackhunter.finey.rest.auth.util.CryptUtil;
import br.com.blackhunter.finey.rest.core.dto.TransactionPeriodDate;
import br.com.blackhunter.finey.rest.finance.analysis.dto.income.IncomeBreakdown;
import br.com.blackhunter.finey.rest.finance.analysis.dto.income.IncomeSource;
import br.com.blackhunter.finey.rest.finance.transaction.entity.TransactionEntity;
import br.com.blackhunter.finey.rest.finance.transaction.enums.TransactionType;
import br.com.blackhunter.finey.rest.integrations.financial_integrator.FinancialIntegrator;
import br.com.blackhunter.finey.rest.integrations.financial_integrator.FinancialIntegratorManager;

/**
 * Servi√ßo respons√°vel por calcular e categorizar fontes de renda financeira.
 * 
 * <p>Este servi√ßo analisa transa√ß√µes de cr√©dito e as categoriza automaticamente
 * em diferentes fontes de renda, calculando valores totais, percentuais de participa√ß√£o
 * e identificando receitas recorrentes vs. vari√°veis.</p>
 * 
 * <p><strong>Funcionalidades:</strong></p>
 * <ul>
 *   <li>Categoriza√ß√£o autom√°tica de receitas baseada em descri√ß√µes</li>
 *   <li>Identifica√ß√£o de receitas recorrentes vs. vari√°veis</li>
 *   <li>C√°lculo de percentuais de participa√ß√£o por fonte</li>
 *   <li>An√°lise de padr√µes de recebimento</li>
 *   <li>Criptografia de todos os dados retornados</li>
 * </ul>
 * 
 * @author BlackHunter Team
 * @version 1.0
 * @since 2024
 */
@Service
public class IncomeBreakdownCalcService {
    
    @Value("${hunter.secrets.pluggy.crypt-secret}")
    private String PLUGGY_CRYPT_SECRET;
    
    /**
     * Calcula o detalhamento de receitas por fonte para o per√≠odo especificado.
     * 
     * <p><strong>Metodologia de C√°lculo:</strong></p>
     * <ol>
     *   <li><strong>Coleta de Dados:</strong> Busca todas as transa√ß√µes CREDIT do per√≠odo</li>
     *   <li><strong>Categoriza√ß√£o:</strong> Classifica receitas por fonte baseada na descri√ß√£o</li>
     *   <li><strong>An√°lise de Recorr√™ncia:</strong> Identifica padr√µes de recebimento mensal</li>
     *   <li><strong>C√°lculo de Percentuais:</strong> Determina participa√ß√£o de cada fonte no total</li>
     *   <li><strong>Criptografia:</strong> Protege todos os dados sens√≠veis</li>
     * </ol>
     * 
     * <p><strong>Categorias de Receita Suportadas:</strong></p>
     * <ul>
     *   <li>Sal√°rio (üíº) - Receitas recorrentes de trabalho</li>
     *   <li>Freelance (üíª) - Trabalhos aut√¥nomos e projetos</li>
     *   <li>Investimentos (üìà) - Dividendos, juros, rendimentos</li>
     *   <li>Aluguel (üè†) - Receitas de loca√ß√£o</li>
     *   <li>Vendas (üõí) - Vendas de produtos ou servi√ßos</li>
     *   <li>Transfer√™ncias (üí∏) - PIX, TED, DOC recebidos</li>
     *   <li>Outros (üí∞) - Demais fontes n√£o categorizadas</li>
     * </ul>
     * 
     * <p><strong>Exemplo de cen√°rio para valida√ß√£o manual:</strong></p>
     * <pre>
     * Per√≠odo: Janeiro 2024
     * 
     * Transa√ß√µes encontradas:
     *   - "Sal√°rio Empresa XYZ" - R$ 5.000,00 (Recorrente)
     *   - "Freelance Projeto ABC" - R$ 2.500,00 (Vari√°vel)
     *   - "Dividendos A√ß√µes" - R$ 300,00 (Recorrente)
     *   - "PIX Recebido" - R$ 200,00 (Vari√°vel)
     * 
     * Resultado esperado:
     *   - Total: R$ 8.000,00
     *   - Recorrente: R$ 5.300,00 (66,25%)
     *   - Vari√°vel: R$ 2.700,00 (33,75%)
     * </pre>
     * 
     * <p><strong>Exemplo de retorno (dados criptografados):</strong></p>
     * <pre>
     * IncomeBreakdown {
     *   incomeSources: [
     *     IncomeSource {
     *       name: "encrypted_Sal√°rio",
     *       amount: "encrypted_5000.00",
     *       percentage: "encrypted_62.5",
     *       isRecurring: "encrypted_true",
     *       icon: "encrypted_üíº"
     *     },
     *     IncomeSource {
     *       name: "encrypted_Freelance",
     *       amount: "encrypted_2500.00",
     *       percentage: "encrypted_31.25",
     *       isRecurring: "encrypted_false",
     *       icon: "encrypted_üíª"
     *     }
     *   ],
     *   totalIncome: "encrypted_8000.00",
     *   recurringIncome: "encrypted_5300.00",
     *   variableIncome: "encrypted_2700.00"
     * }
     * </pre>
     * 
     * <p><strong>Como validar manualmente (QA):</strong></p>
     * <ol>
     *   <li><strong>Verificar Dados:</strong> Confirmar que todas as transa√ß√µes CREDIT do per√≠odo foram inclu√≠das</li>
     *   <li><strong>Validar Categoriza√ß√£o:</strong></li>
     *   <ul>
     *     <li>Verificar se descri√ß√µes foram categorizadas corretamente</li>
     *     <li>Confirmar identifica√ß√£o de receitas recorrentes vs. vari√°veis</li>
     *   </ul>
     *   <li><strong>Conferir C√°lculos:</strong></li>
     *   <ul>
     *     <li>Somar valores por categoria e comparar com totais</li>
     *     <li>Verificar se percentuais somam 100%</li>
     *     <li>Confirmar separa√ß√£o entre receita recorrente e vari√°vel</li>
     *   </ul>
     *   <li><strong>Testar Criptografia:</strong> Descriptografar valores e comparar com dados originais</li>
     * </ol>
     * 
     * @param financialIntegratorManager gerenciador de integra√ß√£o financeira
     * @param bankAccountIds lista de IDs das contas banc√°rias (criptografados)
     * @param periodDate per√≠odo de an√°lise com data de in√≠cio e fim
     * @return detalhamento de receitas por fonte com todos os dados criptografados
     * @throws Exception se houver erro na descriptografia, busca de transa√ß√µes ou criptografia dos resultados
     */
    public IncomeBreakdown calculateIncomeBreakdownEncrypted(
            FinancialIntegratorManager financialIntegratorManager,
            List<String> bankAccountIds,
            TransactionPeriodDate periodDate) throws Exception {
        
        // Mapa para armazenar receitas por categoria
        Map<String, IncomeSourceData> incomeByCategory = new HashMap<>();
        BigDecimal totalIncome = BigDecimal.ZERO;
        
        FinancialIntegrator financialIntegrator = financialIntegratorManager.getFinancialIntegrator();
        
        // Buscar transa√ß√µes de todas as contas
        for (String accountId : bankAccountIds) {
            String accountEntityId = CryptUtil.decrypt(accountId, PLUGGY_CRYPT_SECRET);
            String originalPluggyAccountId = financialIntegrator.getOriginalFinancialAccountIdByTargetId(
                UUID.fromString(accountEntityId)
            );
            
            List<TransactionEntity> transactions = financialIntegrator.getAllTransactionsPeriodByTargetId(
                originalPluggyAccountId,
                periodDate.getStartDate(),
                periodDate.getEndDate()
            );
            
            // Processar apenas transa√ß√µes de cr√©dito (receitas)
            for (TransactionEntity transaction : transactions) {
                if (transaction.getType() == TransactionType.CREDIT) {
                    String category = categorizeIncomeTransaction(transaction);
                    String icon = getIconForCategory(category);
                    boolean isRecurring = isRecurringIncome(transaction, category);
                    
                    IncomeSourceData sourceData = incomeByCategory.getOrDefault(category, 
                        new IncomeSourceData(category, icon, BigDecimal.ZERO, isRecurring));
                    
                    sourceData.amount = sourceData.amount.add(transaction.getAmount());
                    incomeByCategory.put(category, sourceData);
                    
                    totalIncome = totalIncome.add(transaction.getAmount());
                }
            }
        }
        
        // Converter para lista de IncomeSource e calcular percentuais
        List<IncomeSource> incomeSources = new ArrayList<>();
        BigDecimal recurringTotal = BigDecimal.ZERO;
        BigDecimal variableTotal = BigDecimal.ZERO;
        
        for (IncomeSourceData sourceData : incomeByCategory.values()) {
            double percentage = totalIncome.compareTo(BigDecimal.ZERO) > 0 ? 
                sourceData.amount.divide(totalIncome, 4, RoundingMode.HALF_UP)
                    .multiply(new BigDecimal("100")).doubleValue() : 0.0;
            
            // Criptografar todos os campos
            IncomeSource source = new IncomeSource(
                CryptUtil.encrypt(sourceData.category, PLUGGY_CRYPT_SECRET),
                CryptUtil.encrypt(sourceData.amount.toString(), PLUGGY_CRYPT_SECRET),
                CryptUtil.encrypt(String.valueOf(percentage), PLUGGY_CRYPT_SECRET),
                Boolean.parseBoolean(CryptUtil.encrypt(String.valueOf(sourceData.isRecurring), PLUGGY_CRYPT_SECRET)),
                CryptUtil.encrypt(sourceData.icon, PLUGGY_CRYPT_SECRET)
            );
            
            incomeSources.add(source);
            
            // Somar para totais de recorrente/vari√°vel
            if (sourceData.isRecurring) {
                recurringTotal = recurringTotal.add(sourceData.amount);
            } else {
                variableTotal = variableTotal.add(sourceData.amount);
            }
        }
        
        // Ordenar por valor (maior para menor)
        incomeSources.sort((a, b) -> {
                try {
                    return Double.compare(
                       Double.parseDouble(CryptUtil.decrypt(b.getAmount(), PLUGGY_CRYPT_SECRET)),
                       Double.parseDouble(CryptUtil.decrypt(a.getAmount(), PLUGGY_CRYPT_SECRET))
                    );
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        );
        
        // Retornar resultado criptografado
        return new IncomeBreakdown(
            incomeSources,
            CryptUtil.encrypt(totalIncome.toString(), PLUGGY_CRYPT_SECRET),
            CryptUtil.encrypt(recurringTotal.toString(), PLUGGY_CRYPT_SECRET),
            CryptUtil.encrypt(variableTotal.toString(), PLUGGY_CRYPT_SECRET)
        );
    }
    
    /**
     * Categoriza uma transa√ß√£o de receita baseada na descri√ß√£o.
     * 
     * @param transaction transa√ß√£o a ser categorizada
     * @return categoria da receita
     */
    private String categorizeIncomeTransaction(TransactionEntity transaction) {
        String description = transaction.getDescription().toLowerCase();
        
        // Verificar se j√° tem categoria definida na transa√ß√£o
        if (transaction.getCategory() != null && !transaction.getCategory().trim().isEmpty()) {
            return transaction.getCategory();
        }
        
        // Categoriza√ß√£o baseada em palavras-chave na descri√ß√£o
        if (description.contains("salario") || description.contains("sal√°rio") || 
            description.contains("ordenado") || description.contains("vencimento")) {
            return "Sal√°rio";
        }
        
        if (description.contains("freelance") || description.contains("projeto") || 
            description.contains("consultoria") || description.contains("servico")) {
            return "Freelance";
        }
        
        if (description.contains("dividendo") || description.contains("juros") || 
            description.contains("rendimento") || description.contains("investimento")) {
            return "Investimentos";
        }
        
        if (description.contains("aluguel") || description.contains("locacao") || 
            description.contains("loca√ß√£o") || description.contains("imovel")) {
            return "Aluguel";
        }
        
        if (description.contains("venda") || description.contains("produto") || 
            description.contains("mercadoria") || description.contains("comercio")) {
            return "Vendas";
        }
        
        if (description.contains("pix") || description.contains("ted") || 
            description.contains("doc") || description.contains("transferencia")) {
            return "Transfer√™ncias";
        }
        
        return "Outros";
    }
    
    /**
     * Retorna o √≠cone correspondente √† categoria.
     * 
     * @param category categoria da receita
     * @return √≠cone da categoria
     */
    private String getIconForCategory(String category) {
        switch (category) {
            case "Sal√°rio": return "üíº";
            case "Freelance": return "üíª";
            case "Investimentos": return "üìà";
            case "Aluguel": return "üè†";
            case "Vendas": return "üõí";
            case "Transfer√™ncias": return "üí∏";
            default: return "üí∞";
        }
    }
    
    /**
     * Determina se uma receita √© recorrente baseada na categoria e padr√µes.
     * 
     * @param transaction transa√ß√£o a ser analisada
     * @param category categoria da receita
     * @return true se for receita recorrente
     */
    private boolean isRecurringIncome(TransactionEntity transaction, String category) {
        // Categorias tipicamente recorrentes
        if (category.equals("Sal√°rio") || category.equals("Aluguel") || 
            category.equals("Investimentos")) {
            return true;
        }
        
        // Categorias tipicamente vari√°veis
        if (category.equals("Freelance") || category.equals("Vendas") || 
            category.equals("Transfer√™ncias")) {
            return false;
        }
        
        // Para "Outros", analisar valor (valores altos tendem a ser recorrentes)
        return transaction.getAmount().compareTo(new BigDecimal("1000.00")) >= 0;
    }
    
    /**
     * Classe interna para armazenar dados tempor√°rios de fonte de receita.
     */
    private static class IncomeSourceData {
        String category;
        String icon;
        BigDecimal amount;
        boolean isRecurring;
        
        IncomeSourceData(String category, String icon, BigDecimal amount, boolean isRecurring) {
            this.category = category;
            this.icon = icon;
            this.amount = amount;
            this.isRecurring = isRecurring;
        }
    }
}